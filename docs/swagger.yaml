basePath: /api/v1
definitions:
  models.AddItemRequest:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
      unit_price:
        minimum: 0
        type: number
    required:
    - product_id
    - quantity
    - unit_price
    type: object
  models.Address:
    properties:
      city:
        type: string
      country:
        type: string
      postal_code:
        type: string
      state:
        type: string
      street:
        type: string
    required:
    - city
    - country
    - postal_code
    - state
    - street
    type: object
  models.Cart:
    properties:
      created_at:
        type: string
      id:
        type: string
      items:
        additionalProperties:
          $ref: '#/definitions/models.CartItem'
        type: object
      total:
        type: number
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.CartItem:
    properties:
      product_id:
        type: string
      quantity:
        type: integer
      total_price:
        type: number
      unit_price:
        type: number
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateOrderRequest:
    properties:
      customer_id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        minItems: 1
        type: array
      shipping_address:
        $ref: '#/definitions/models.Address'
    required:
    - customer_id
    - items
    - shipping_address
    type: object
  models.CreateProductRequest:
    properties:
      category_id:
        type: string
      description:
        type: string
      name:
        maxLength: 200
        minLength: 3
        type: string
      price:
        type: number
      sku:
        maxLength: 50
        minLength: 3
        type: string
      stock_quantity:
        minimum: 0
        type: integer
    required:
    - category_id
    - name
    - price
    - sku
    - stock_quantity
    type: object
  models.EmailNotificationRequest:
    properties:
      bcc:
        items:
          type: string
        type: array
      cc:
        items:
          type: string
        type: array
      content:
        type: string
      html_content:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      subject:
        type: string
      to:
        type: string
    required:
    - content
    - subject
    - to
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      expires_in:
        type: integer
      message:
        type: string
      remaining_tries:
        type: integer
      retry_after:
        type: integer
      success:
        type: boolean
      token:
        type: string
    type: object
  models.Notification:
    properties:
      content:
        type: string
      created_at:
        type: string
      error_message:
        type: string
      id:
        type: string
      metadata:
        description: highly dynamic
        type: object
      recipient:
        type: string
      sent_at:
        type: string
      status:
        $ref: '#/definitions/models.NotificationStatus'
      subject:
        type: string
      type:
        $ref: '#/definitions/models.NotificationType'
      updated_at:
        type: string
    type: object
  models.NotificationStatus:
    enum:
    - pending
    - sent
    - failed
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusSent
    - StatusFailed
  models.NotificationType:
    enum:
    - email
    - sms
    - push
    type: string
    x-enum-varnames:
    - NotificationTypeEmail
    - NotificationTypeSMS
    - NotificationTypePush
  models.Order:
    properties:
      created_at:
        type: string
      customer_id:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        minItems: 1
        type: array
      payment_intent_id:
        type: string
      payment_status:
        $ref: '#/definitions/models.PaymentStatus'
      shipping_address:
        $ref: '#/definitions/models.Address'
      status:
        $ref: '#/definitions/models.OrderStatus'
      total_amount:
        type: number
      updated_at:
        type: string
    required:
    - customer_id
    - items
    - shipping_address
    type: object
  models.OrderItem:
    properties:
      created_at:
        type: string
      id:
        type: string
      order_id:
        type: string
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
      unit_price:
        minimum: 0
        type: number
    required:
    - product_id
    - quantity
    - unit_price
    type: object
  models.OrderStatus:
    enum:
    - pending
    - confirmed
    - shipping
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusConfirmed
    - OrderStatusShipping
    - OrderStatusDelivered
    - OrderStatusCancelled
  models.PaginatedResponse:
    properties:
      data: {}
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
    type: object
  models.Payment:
    properties:
      amount:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      customer_id:
        type: string
      description:
        type: string
      id:
        type: string
      payment_method:
        type: string
      payment_status:
        $ref: '#/definitions/models.PaymentStatus'
      stripe_id:
        type: string
      updated_at:
        type: string
    type: object
  models.PaymentRequest:
    properties:
      amount:
        type: integer
      currency:
        maxLength: 3
        type: string
      customer_id:
        type: string
      description:
        type: string
      payment_method:
        type: string
      token:
        description: |-
          CardNumber    string `json:"card_number" validate:"required_if=PaymentMethod card,omitempty,credit_card"`
          CardExpMonth  int    `json:"card_exp_month" validate:"required_if=PaymentMethod card,omitempty,min=1,max=12"`
          CardExpYear   int    `json:"card_exp_year" validate:"required_if=PaymentMethod card,omitempty,min=2025"`
          CardCVC       string `json:"card_cvc" validate:"required_if=PaymentMethod card,omitempty,len=3"`
        type: string
    required:
    - amount
    - currency
    - customer_id
    - description
    - payment_method
    - token
    type: object
  models.PaymentResponse:
    properties:
      client_secret:
        type: string
      message:
        type: string
      payment:
        $ref: '#/definitions/models.Payment'
      payment_status:
        type: string
    type: object
  models.PaymentStatus:
    enum:
    - pending
    - succeeded
    - failed
    - refunded
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusSucceeded
    - PaymentStatusFailed
    - PaymentStatusRefunded
  models.Product:
    properties:
      category:
        $ref: '#/definitions/models.Category'
      category_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      status:
        type: string
      stock_quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.UpdateOrderStatusRequest:
    properties:
      status:
        allOf:
        - $ref: '#/definitions/models.OrderStatus'
        enum:
        - pending
        - confirmed
        - shipping
        - delivered
        - cancelled
    required:
    - status
    type: object
  models.UpdateProductRequest:
    properties:
      category_id:
        type: string
      description:
        type: string
      name:
        maxLength: 200
        minLength: 3
        type: string
      price:
        type: number
      status:
        enum:
        - active
        - inactive
        - discontinued
        type: string
      stock_quantity:
        minimum: 0
        type: integer
    type: object
  models.UpdateQuantityRequest:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 0
        type: integer
    required:
    - product_id
    - quantity
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - email
    - name
    - username
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: string
      details:
        items:
          type: string
        type: array
      message:
        type: string
    type: object
host: 0.0.0.0:8085
info:
  contact:
    email: aaravmahajan2003@gmail.com
    name: Aarav Mahajan
    url: https://github.com/aaravmahajanofficial
  description: This is the API server for the Scalable E-commerce Platform. It provides
    endpoints for managing users, products, carts, orders, payments, and notifications.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Scalable E-commerce Platform API
  version: "1.0"
paths:
  /carts:
    get:
      description: Retrieves the current shopping cart contents for the authenticated
        user. Creates a cart if one doesn't exist.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved or created cart
          schema:
            $ref: '#/definitions/models.Cart'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error (e.g., failed to create cart)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the user's shopping cart
      tags:
      - Cart
  /carts/items:
    post:
      consumes:
      - application/json
      description: Adds a specified quantity of a product to the authenticated user's
        shopping cart. Creates cart if needed.
      parameters:
      - description: Item details (Product ID and Quantity)
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.AddItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item successfully added/updated in cart
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Validation error or invalid product ID/quantity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add an item to the cart
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Updates the quantity of a specific item in the authenticated user's
        shopping cart.
      parameters:
      - description: Item details (Product ID and new Quantity)
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/models.UpdateQuantityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Quantity successfully updated
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Validation error or invalid product ID/quantity
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Cart or item not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update item quantity in the cart
      tags:
      - Cart
  /notifications:
    get:
      description: Retrieves a paginated list of notifications for the authenticated
        user. Requires authentication.
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of notifications
          schema:
            allOf:
            - $ref: '#/definitions/models.PaginatedResponse'
            - properties:
                Data:
                  items:
                    $ref: '#/definitions/models.Notification'
                  type: array
              type: object
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List notifications for the user
      tags:
      - Notifications
  /notifications/email:
    post:
      consumes:
      - application/json
      description: Creates and sends an email notification record. This might be an
        admin-triggered action or for specific internal purposes. Requires authentication.
      parameters:
      - description: Email Notification Details (Recipient User ID, Subject, Body)
        in: body
        name: notification
        required: true
        schema:
          $ref: '#/definitions/models.EmailNotificationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created and potentially queued email notification
          schema:
            $ref: '#/definitions/models.Notification'
        "400":
          description: Validation error or invalid input
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions" // If restricted
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Recipient User not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error or email sending provider error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send an email notification (Admin/Internal)
      tags:
      - Notifications
  /orders:
    get:
      description: Retrieves a paginated list of orders placed by the authenticated
        user. Requires authentication.
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of orders
          schema:
            allOf:
            - $ref: '#/definitions/models.PaginatedResponse'
            - properties:
                Data:
                  items:
                    $ref: '#/definitions/models.Order'
                  type: array
              type: object
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user's orders with pagination
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Creates a new order from the user's current cart items and provided
        shipping details. Requires authentication.
      parameters:
      - description: Order Creation Details (includes shipping, uses current cart)
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created order
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Validation error, empty cart, or insufficient stock
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Cart not found (should be created implicitly if needed)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - Orders
  /orders/{id}:
    get:
      description: Retrieves details for a specific order placed by the authenticated
        user. Requires authentication.
      parameters:
      - description: Order ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved order
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Invalid order ID format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - User does not own this order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an order by ID
      tags:
      - Orders
  /orders/{id}/status:
    patch:
      consumes:
      - application/json
      description: Updates the status of a specific order. Requires authentication
        (potentially admin-level).
      parameters:
      - description: Order ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: New Order Status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated order status
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Invalid order ID format or invalid status value
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - Insufficient permissions to update status" // If
            applicable
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update order status (Admin/Internal)
      tags:
      - Orders
  /payments:
    get:
      description: Retrieves a paginated list of payment records for the authenticated
        user. Requires authentication.
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of payments
          schema:
            allOf:
            - $ref: '#/definitions/models.PaginatedResponse'
            - properties:
                Data:
                  items:
                    $ref: '#/definitions/models.Payment'
                  type: array
              type: object
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user's payments with pagination
      tags:
      - Payments
    post:
      consumes:
      - application/json
      description: Creates a payment intent (e.g., with Stripe) for a specified order
        and returns the client secret needed for frontend processing. Requires authentication.
      parameters:
      - description: Payment Request Details (Order ID, Amount, Currency, Customer
          ID)
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/models.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully initiated payment, includes client secret
          schema:
            $ref: '#/definitions/models.PaymentResponse'
        "400":
          description: Validation error or invalid input
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - Attempting to pay for another user's order
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Order not found or already paid
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error or payment provider error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Initiate a payment for an order
      tags:
      - Payments
  /payments/{id}:
    get:
      description: Retrieves details for a specific payment record. Requires authentication.
        (Authorization might be needed to restrict access).
      parameters:
      - description: Payment ID (Internal DB ID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved payment details
          schema:
            $ref: '#/definitions/models.Payment'
        "400":
          description: Invalid or missing payment ID
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - User cannot access this payment" // Add if authz
            implemented
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Payment not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get payment details by ID
      tags:
      - Payments
  /payments/webhook:
    post:
      consumes:
      - application/json
      description: Receives and processes webhook events from Stripe (e.g., payment
        success, failure) to update internal payment and order statuses. This endpoint
        should not require application-level authentication but relies on Stripe's
        signature verification.
      parameters:
      - description: Stripe webhook signature for verification
        in: header
        name: Stripe-Signature
        required: true
        type: string
      - description: Raw Stripe event payload (JSON)
        in: body
        name: payload
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad request (e.g., missing signature, failed reading body,
            invalid payload)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Webhook signature verification failed
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error during webhook processing
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Handle incoming Stripe webhooks
      tags:
      - Payments (Internal)
  /products:
    get:
      description: Retrieves a paginated list of available products. Requires authentication.
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Number of items per page (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of products
          schema:
            allOf:
            - $ref: '#/definitions/models.PaginatedResponse'
            - properties:
                Data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List products with pagination
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Adds a new product to the catalog. Requires authentication.
      parameters:
      - description: Product Creation Details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created product
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Validation error or invalid input
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    get:
      description: Retrieves details for a specific product using its ID. Requires
        authentication.
      parameters:
      - description: Product ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved product
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid product ID format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Updates details for an existing product using its ID. Requires
        authentication.
      parameters:
      - description: Product ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Product Update Details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated product
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid product ID format or validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Authentication required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product by ID
      tags:
      - Products
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token upon successful login.
      parameters:
      - description: User Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login, includes JWT token
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Validation error or invalid input
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "429":
          description: Too many login attempts
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Log in a user
      tags:
      - Users
  /users/profile:
    get:
      description: Retrieves the profile information for the currently authenticated
        user.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Authentication required (invalid or missing token)
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with the provided details.
      parameters:
      - description: User Registration Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Validation error or invalid input
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: User with email already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: 'Type "Bearer" followed by a space and JWT token. Example: "Bearer
      {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
