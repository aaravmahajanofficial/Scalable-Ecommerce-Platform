// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	stripe0 "github.com/aaravmahajanofficial/scalable-ecommerce-platform/pkg/stripe"
	mock "github.com/stretchr/testify/mock"
	"github.com/stripe/stripe-go/v81"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AttachPaymentMethodToIntent provides a mock function for the type MockClient
func (_mock *MockClient) AttachPaymentMethodToIntent(paymentMethodID string, paymentIntentID string) error {
	ret := _mock.Called(paymentMethodID, paymentIntentID)

	if len(ret) == 0 {
		panic("no return value specified for AttachPaymentMethodToIntent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(paymentMethodID, paymentIntentID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_AttachPaymentMethodToIntent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachPaymentMethodToIntent'
type MockClient_AttachPaymentMethodToIntent_Call struct {
	*mock.Call
}

// AttachPaymentMethodToIntent is a helper method to define mock.On call
//   - paymentMethodID
//   - paymentIntentID
func (_e *MockClient_Expecter) AttachPaymentMethodToIntent(paymentMethodID interface{}, paymentIntentID interface{}) *MockClient_AttachPaymentMethodToIntent_Call {
	return &MockClient_AttachPaymentMethodToIntent_Call{Call: _e.mock.On("AttachPaymentMethodToIntent", paymentMethodID, paymentIntentID)}
}

func (_c *MockClient_AttachPaymentMethodToIntent_Call) Run(run func(paymentMethodID string, paymentIntentID string)) *MockClient_AttachPaymentMethodToIntent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClient_AttachPaymentMethodToIntent_Call) Return(err error) *MockClient_AttachPaymentMethodToIntent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_AttachPaymentMethodToIntent_Call) RunAndReturn(run func(paymentMethodID string, paymentIntentID string) error) *MockClient_AttachPaymentMethodToIntent_Call {
	_c.Call.Return(run)
	return _c
}

// ConfirmPaymentIntent provides a mock function for the type MockClient
func (_mock *MockClient) ConfirmPaymentIntent(paymentIntentID string) (*stripe.PaymentIntent, error) {
	ret := _mock.Called(paymentIntentID)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmPaymentIntent")
	}

	var r0 *stripe.PaymentIntent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*stripe.PaymentIntent, error)); ok {
		return returnFunc(paymentIntentID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *stripe.PaymentIntent); ok {
		r0 = returnFunc(paymentIntentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentIntent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(paymentIntentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_ConfirmPaymentIntent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfirmPaymentIntent'
type MockClient_ConfirmPaymentIntent_Call struct {
	*mock.Call
}

// ConfirmPaymentIntent is a helper method to define mock.On call
//   - paymentIntentID
func (_e *MockClient_Expecter) ConfirmPaymentIntent(paymentIntentID interface{}) *MockClient_ConfirmPaymentIntent_Call {
	return &MockClient_ConfirmPaymentIntent_Call{Call: _e.mock.On("ConfirmPaymentIntent", paymentIntentID)}
}

func (_c *MockClient_ConfirmPaymentIntent_Call) Run(run func(paymentIntentID string)) *MockClient_ConfirmPaymentIntent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_ConfirmPaymentIntent_Call) Return(paymentIntent *stripe.PaymentIntent, err error) *MockClient_ConfirmPaymentIntent_Call {
	_c.Call.Return(paymentIntent, err)
	return _c
}

func (_c *MockClient_ConfirmPaymentIntent_Call) RunAndReturn(run func(paymentIntentID string) (*stripe.PaymentIntent, error)) *MockClient_ConfirmPaymentIntent_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePaymentIntent provides a mock function for the type MockClient
func (_mock *MockClient) CreatePaymentIntent(amount int64, currency string, description string, customerID string) (*stripe.PaymentIntent, error) {
	ret := _mock.Called(amount, currency, description, customerID)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentIntent")
	}

	var r0 *stripe.PaymentIntent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64, string, string, string) (*stripe.PaymentIntent, error)); ok {
		return returnFunc(amount, currency, description, customerID)
	}
	if returnFunc, ok := ret.Get(0).(func(int64, string, string, string) *stripe.PaymentIntent); ok {
		r0 = returnFunc(amount, currency, description, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentIntent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64, string, string, string) error); ok {
		r1 = returnFunc(amount, currency, description, customerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_CreatePaymentIntent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentIntent'
type MockClient_CreatePaymentIntent_Call struct {
	*mock.Call
}

// CreatePaymentIntent is a helper method to define mock.On call
//   - amount
//   - currency
//   - description
//   - customerID
func (_e *MockClient_Expecter) CreatePaymentIntent(amount interface{}, currency interface{}, description interface{}, customerID interface{}) *MockClient_CreatePaymentIntent_Call {
	return &MockClient_CreatePaymentIntent_Call{Call: _e.mock.On("CreatePaymentIntent", amount, currency, description, customerID)}
}

func (_c *MockClient_CreatePaymentIntent_Call) Run(run func(amount int64, currency string, description string, customerID string)) *MockClient_CreatePaymentIntent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_CreatePaymentIntent_Call) Return(paymentIntent *stripe.PaymentIntent, err error) *MockClient_CreatePaymentIntent_Call {
	_c.Call.Return(paymentIntent, err)
	return _c
}

func (_c *MockClient_CreatePaymentIntent_Call) RunAndReturn(run func(amount int64, currency string, description string, customerID string) (*stripe.PaymentIntent, error)) *MockClient_CreatePaymentIntent_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePaymentMethod provides a mock function for the type MockClient
func (_mock *MockClient) CreatePaymentMethod(cardNumber string, cardExpMonth string, cardExpYear string, cardCVC string) (*stripe.PaymentMethod, error) {
	ret := _mock.Called(cardNumber, cardExpMonth, cardExpYear, cardCVC)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentMethod")
	}

	var r0 *stripe.PaymentMethod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) (*stripe.PaymentMethod, error)); ok {
		return returnFunc(cardNumber, cardExpMonth, cardExpYear, cardCVC)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) *stripe.PaymentMethod); ok {
		r0 = returnFunc(cardNumber, cardExpMonth, cardExpYear, cardCVC)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentMethod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = returnFunc(cardNumber, cardExpMonth, cardExpYear, cardCVC)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_CreatePaymentMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentMethod'
type MockClient_CreatePaymentMethod_Call struct {
	*mock.Call
}

// CreatePaymentMethod is a helper method to define mock.On call
//   - cardNumber
//   - cardExpMonth
//   - cardExpYear
//   - cardCVC
func (_e *MockClient_Expecter) CreatePaymentMethod(cardNumber interface{}, cardExpMonth interface{}, cardExpYear interface{}, cardCVC interface{}) *MockClient_CreatePaymentMethod_Call {
	return &MockClient_CreatePaymentMethod_Call{Call: _e.mock.On("CreatePaymentMethod", cardNumber, cardExpMonth, cardExpYear, cardCVC)}
}

func (_c *MockClient_CreatePaymentMethod_Call) Run(run func(cardNumber string, cardExpMonth string, cardExpYear string, cardCVC string)) *MockClient_CreatePaymentMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_CreatePaymentMethod_Call) Return(paymentMethod *stripe.PaymentMethod, err error) *MockClient_CreatePaymentMethod_Call {
	_c.Call.Return(paymentMethod, err)
	return _c
}

func (_c *MockClient_CreatePaymentMethod_Call) RunAndReturn(run func(cardNumber string, cardExpMonth string, cardExpYear string, cardCVC string) (*stripe.PaymentMethod, error)) *MockClient_CreatePaymentMethod_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePaymentMethodFromToken provides a mock function for the type MockClient
func (_mock *MockClient) CreatePaymentMethodFromToken(paymentMethodID string) (*stripe.PaymentMethod, error) {
	ret := _mock.Called(paymentMethodID)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaymentMethodFromToken")
	}

	var r0 *stripe.PaymentMethod
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*stripe.PaymentMethod, error)); ok {
		return returnFunc(paymentMethodID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *stripe.PaymentMethod); ok {
		r0 = returnFunc(paymentMethodID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.PaymentMethod)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(paymentMethodID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_CreatePaymentMethodFromToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentMethodFromToken'
type MockClient_CreatePaymentMethodFromToken_Call struct {
	*mock.Call
}

// CreatePaymentMethodFromToken is a helper method to define mock.On call
//   - paymentMethodID
func (_e *MockClient_Expecter) CreatePaymentMethodFromToken(paymentMethodID interface{}) *MockClient_CreatePaymentMethodFromToken_Call {
	return &MockClient_CreatePaymentMethodFromToken_Call{Call: _e.mock.On("CreatePaymentMethodFromToken", paymentMethodID)}
}

func (_c *MockClient_CreatePaymentMethodFromToken_Call) Run(run func(paymentMethodID string)) *MockClient_CreatePaymentMethodFromToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_CreatePaymentMethodFromToken_Call) Return(paymentMethod *stripe.PaymentMethod, err error) *MockClient_CreatePaymentMethodFromToken_Call {
	_c.Call.Return(paymentMethod, err)
	return _c
}

func (_c *MockClient_CreatePaymentMethodFromToken_Call) RunAndReturn(run func(paymentMethodID string) (*stripe.PaymentMethod, error)) *MockClient_CreatePaymentMethodFromToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefundPayment provides a mock function for the type MockClient
func (_mock *MockClient) RefundPayment(paymentIntentID string, amount int64) (*stripe.Refund, error) {
	ret := _mock.Called(paymentIntentID, amount)

	if len(ret) == 0 {
		panic("no return value specified for RefundPayment")
	}

	var r0 *stripe.Refund
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int64) (*stripe.Refund, error)); ok {
		return returnFunc(paymentIntentID, amount)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int64) *stripe.Refund); ok {
		r0 = returnFunc(paymentIntentID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stripe.Refund)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = returnFunc(paymentIntentID, amount)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_RefundPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefundPayment'
type MockClient_RefundPayment_Call struct {
	*mock.Call
}

// RefundPayment is a helper method to define mock.On call
//   - paymentIntentID
//   - amount
func (_e *MockClient_Expecter) RefundPayment(paymentIntentID interface{}, amount interface{}) *MockClient_RefundPayment_Call {
	return &MockClient_RefundPayment_Call{Call: _e.mock.On("RefundPayment", paymentIntentID, amount)}
}

func (_c *MockClient_RefundPayment_Call) Run(run func(paymentIntentID string, amount int64)) *MockClient_RefundPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockClient_RefundPayment_Call) Return(refund *stripe.Refund, err error) *MockClient_RefundPayment_Call {
	_c.Call.Return(refund, err)
	return _c
}

func (_c *MockClient_RefundPayment_Call) RunAndReturn(run func(paymentIntentID string, amount int64) (*stripe.Refund, error)) *MockClient_RefundPayment_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyWebhookSignature provides a mock function for the type MockClient
func (_mock *MockClient) VerifyWebhookSignature(payload []byte, signature string) (stripe0.Event, error) {
	ret := _mock.Called(payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for VerifyWebhookSignature")
	}

	var r0 stripe0.Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte, string) (stripe0.Event, error)); ok {
		return returnFunc(payload, signature)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte, string) stripe0.Event); ok {
		r0 = returnFunc(payload, signature)
	} else {
		r0 = ret.Get(0).(stripe0.Event)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = returnFunc(payload, signature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_VerifyWebhookSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyWebhookSignature'
type MockClient_VerifyWebhookSignature_Call struct {
	*mock.Call
}

// VerifyWebhookSignature is a helper method to define mock.On call
//   - payload
//   - signature
func (_e *MockClient_Expecter) VerifyWebhookSignature(payload interface{}, signature interface{}) *MockClient_VerifyWebhookSignature_Call {
	return &MockClient_VerifyWebhookSignature_Call{Call: _e.mock.On("VerifyWebhookSignature", payload, signature)}
}

func (_c *MockClient_VerifyWebhookSignature_Call) Run(run func(payload []byte, signature string)) *MockClient_VerifyWebhookSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *MockClient_VerifyWebhookSignature_Call) Return(v stripe0.Event, err error) *MockClient_VerifyWebhookSignature_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockClient_VerifyWebhookSignature_Call) RunAndReturn(run func(payload []byte, signature string) (stripe0.Event, error)) *MockClient_VerifyWebhookSignature_Call {
	_c.Call.Return(run)
	return _c
}
