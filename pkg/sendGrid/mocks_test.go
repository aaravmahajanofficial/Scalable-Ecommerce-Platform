// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sendGrid

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEmailService creates a new instance of MockEmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailService {
	mock := &MockEmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEmailService is an autogenerated mock type for the EmailService type
type MockEmailService struct {
	mock.Mock
}

type MockEmailService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailService) EXPECT() *MockEmailService_Expecter {
	return &MockEmailService_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockEmailService
func (_mock *MockEmailService) Send(ctx context.Context, req *models.EmailNotificationRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.EmailNotificationRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEmailService_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockEmailService_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockEmailService_Expecter) Send(ctx interface{}, req interface{}) *MockEmailService_Send_Call {
	return &MockEmailService_Send_Call{Call: _e.mock.On("Send", ctx, req)}
}

func (_c *MockEmailService_Send_Call) Run(run func(ctx context.Context, req *models.EmailNotificationRequest)) *MockEmailService_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.EmailNotificationRequest))
	})
	return _c
}

func (_c *MockEmailService_Send_Call) Return(err error) *MockEmailService_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEmailService_Send_Call) RunAndReturn(run func(ctx context.Context, req *models.EmailNotificationRequest) error) *MockEmailService_Send_Call {
	_c.Call.Return(run)
	return _c
}
