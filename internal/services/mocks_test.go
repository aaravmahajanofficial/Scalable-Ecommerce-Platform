// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/pkg/stripe"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCartService creates a new instance of MockCartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCartService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCartService {
	mock := &MockCartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCartService is an autogenerated mock type for the CartService type
type MockCartService struct {
	mock.Mock
}

type MockCartService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCartService) EXPECT() *MockCartService_Expecter {
	return &MockCartService_Expecter{mock: &_m.Mock}
}

// AddItem provides a mock function for the type MockCartService
func (_mock *MockCartService) AddItem(ctx context.Context, customerID uuid.UUID, req *models.AddItemRequest) (*models.Cart, error) {
	ret := _mock.Called(ctx, customerID, req)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 *models.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.AddItemRequest) (*models.Cart, error)); ok {
		return returnFunc(ctx, customerID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.AddItemRequest) *models.Cart); ok {
		r0 = returnFunc(ctx, customerID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.AddItemRequest) error); ok {
		r1 = returnFunc(ctx, customerID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCartService_AddItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItem'
type MockCartService_AddItem_Call struct {
	*mock.Call
}

// AddItem is a helper method to define mock.On call
//   - ctx
//   - customerID
//   - req
func (_e *MockCartService_Expecter) AddItem(ctx interface{}, customerID interface{}, req interface{}) *MockCartService_AddItem_Call {
	return &MockCartService_AddItem_Call{Call: _e.mock.On("AddItem", ctx, customerID, req)}
}

func (_c *MockCartService_AddItem_Call) Run(run func(ctx context.Context, customerID uuid.UUID, req *models.AddItemRequest)) *MockCartService_AddItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.AddItemRequest))
	})
	return _c
}

func (_c *MockCartService_AddItem_Call) Return(cart *models.Cart, err error) *MockCartService_AddItem_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *MockCartService_AddItem_Call) RunAndReturn(run func(ctx context.Context, customerID uuid.UUID, req *models.AddItemRequest) (*models.Cart, error)) *MockCartService_AddItem_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCart provides a mock function for the type MockCartService
func (_mock *MockCartService) CreateCart(ctx context.Context, userId uuid.UUID) (*models.Cart, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateCart")
	}

	var r0 *models.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Cart, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Cart); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCartService_CreateCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCart'
type MockCartService_CreateCart_Call struct {
	*mock.Call
}

// CreateCart is a helper method to define mock.On call
//   - ctx
//   - userId
func (_e *MockCartService_Expecter) CreateCart(ctx interface{}, userId interface{}) *MockCartService_CreateCart_Call {
	return &MockCartService_CreateCart_Call{Call: _e.mock.On("CreateCart", ctx, userId)}
}

func (_c *MockCartService_CreateCart_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockCartService_CreateCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockCartService_CreateCart_Call) Return(cart *models.Cart, err error) *MockCartService_CreateCart_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *MockCartService_CreateCart_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) (*models.Cart, error)) *MockCartService_CreateCart_Call {
	_c.Call.Return(run)
	return _c
}

// GetCart provides a mock function for the type MockCartService
func (_mock *MockCartService) GetCart(ctx context.Context, customerID uuid.UUID) (*models.Cart, error) {
	ret := _mock.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCart")
	}

	var r0 *models.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Cart, error)); ok {
		return returnFunc(ctx, customerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Cart); ok {
		r0 = returnFunc(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCartService_GetCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCart'
type MockCartService_GetCart_Call struct {
	*mock.Call
}

// GetCart is a helper method to define mock.On call
//   - ctx
//   - customerID
func (_e *MockCartService_Expecter) GetCart(ctx interface{}, customerID interface{}) *MockCartService_GetCart_Call {
	return &MockCartService_GetCart_Call{Call: _e.mock.On("GetCart", ctx, customerID)}
}

func (_c *MockCartService_GetCart_Call) Run(run func(ctx context.Context, customerID uuid.UUID)) *MockCartService_GetCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockCartService_GetCart_Call) Return(cart *models.Cart, err error) *MockCartService_GetCart_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *MockCartService_GetCart_Call) RunAndReturn(run func(ctx context.Context, customerID uuid.UUID) (*models.Cart, error)) *MockCartService_GetCart_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQuantity provides a mock function for the type MockCartService
func (_mock *MockCartService) UpdateQuantity(ctx context.Context, customerID uuid.UUID, req *models.UpdateQuantityRequest) (*models.Cart, error) {
	ret := _mock.Called(ctx, customerID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuantity")
	}

	var r0 *models.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateQuantityRequest) (*models.Cart, error)); ok {
		return returnFunc(ctx, customerID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateQuantityRequest) *models.Cart); ok {
		r0 = returnFunc(ctx, customerID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.UpdateQuantityRequest) error); ok {
		r1 = returnFunc(ctx, customerID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCartService_UpdateQuantity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQuantity'
type MockCartService_UpdateQuantity_Call struct {
	*mock.Call
}

// UpdateQuantity is a helper method to define mock.On call
//   - ctx
//   - customerID
//   - req
func (_e *MockCartService_Expecter) UpdateQuantity(ctx interface{}, customerID interface{}, req interface{}) *MockCartService_UpdateQuantity_Call {
	return &MockCartService_UpdateQuantity_Call{Call: _e.mock.On("UpdateQuantity", ctx, customerID, req)}
}

func (_c *MockCartService_UpdateQuantity_Call) Run(run func(ctx context.Context, customerID uuid.UUID, req *models.UpdateQuantityRequest)) *MockCartService_UpdateQuantity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.UpdateQuantityRequest))
	})
	return _c
}

func (_c *MockCartService_UpdateQuantity_Call) Return(cart *models.Cart, err error) *MockCartService_UpdateQuantity_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *MockCartService_UpdateQuantity_Call) RunAndReturn(run func(ctx context.Context, customerID uuid.UUID, req *models.UpdateQuantityRequest) (*models.Cart, error)) *MockCartService_UpdateQuantity_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationService creates a new instance of MockNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationService {
	mock := &MockNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationService is an autogenerated mock type for the NotificationService type
type MockNotificationService struct {
	mock.Mock
}

type MockNotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationService) EXPECT() *MockNotificationService_Expecter {
	return &MockNotificationService_Expecter{mock: &_m.Mock}
}

// GetNotification provides a mock function for the type MockNotificationService
func (_mock *MockNotificationService) GetNotification(ctx context.Context, id uuid.UUID) (*models.Notification, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotification")
	}

	var r0 *models.Notification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Notification, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Notification); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationService_GetNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotification'
type MockNotificationService_GetNotification_Call struct {
	*mock.Call
}

// GetNotification is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockNotificationService_Expecter) GetNotification(ctx interface{}, id interface{}) *MockNotificationService_GetNotification_Call {
	return &MockNotificationService_GetNotification_Call{Call: _e.mock.On("GetNotification", ctx, id)}
}

func (_c *MockNotificationService_GetNotification_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockNotificationService_GetNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockNotificationService_GetNotification_Call) Return(notification *models.Notification, err error) *MockNotificationService_GetNotification_Call {
	_c.Call.Return(notification, err)
	return _c
}

func (_c *MockNotificationService_GetNotification_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Notification, error)) *MockNotificationService_GetNotification_Call {
	_c.Call.Return(run)
	return _c
}

// ListNotifications provides a mock function for the type MockNotificationService
func (_mock *MockNotificationService) ListNotifications(ctx context.Context, page int, size int) ([]*models.Notification, int, error) {
	ret := _mock.Called(ctx, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListNotifications")
	}

	var r0 []*models.Notification
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Notification, int, error)); ok {
		return returnFunc(ctx, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Notification); ok {
		r0 = returnFunc(ctx, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationService_ListNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotifications'
type MockNotificationService_ListNotifications_Call struct {
	*mock.Call
}

// ListNotifications is a helper method to define mock.On call
//   - ctx
//   - page
//   - size
func (_e *MockNotificationService_Expecter) ListNotifications(ctx interface{}, page interface{}, size interface{}) *MockNotificationService_ListNotifications_Call {
	return &MockNotificationService_ListNotifications_Call{Call: _e.mock.On("ListNotifications", ctx, page, size)}
}

func (_c *MockNotificationService_ListNotifications_Call) Run(run func(ctx context.Context, page int, size int)) *MockNotificationService_ListNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockNotificationService_ListNotifications_Call) Return(notifications []*models.Notification, n int, err error) *MockNotificationService_ListNotifications_Call {
	_c.Call.Return(notifications, n, err)
	return _c
}

func (_c *MockNotificationService_ListNotifications_Call) RunAndReturn(run func(ctx context.Context, page int, size int) ([]*models.Notification, int, error)) *MockNotificationService_ListNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// SendEmail provides a mock function for the type MockNotificationService
func (_mock *MockNotificationService) SendEmail(ctx context.Context, req *models.EmailNotificationRequest) (*models.NotificationResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 *models.NotificationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.EmailNotificationRequest) (*models.NotificationResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.EmailNotificationRequest) *models.NotificationResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NotificationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.EmailNotificationRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationService_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MockNotificationService_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockNotificationService_Expecter) SendEmail(ctx interface{}, req interface{}) *MockNotificationService_SendEmail_Call {
	return &MockNotificationService_SendEmail_Call{Call: _e.mock.On("SendEmail", ctx, req)}
}

func (_c *MockNotificationService_SendEmail_Call) Run(run func(ctx context.Context, req *models.EmailNotificationRequest)) *MockNotificationService_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.EmailNotificationRequest))
	})
	return _c
}

func (_c *MockNotificationService_SendEmail_Call) Return(notificationResponse *models.NotificationResponse, err error) *MockNotificationService_SendEmail_Call {
	_c.Call.Return(notificationResponse, err)
	return _c
}

func (_c *MockNotificationService_SendEmail_Call) RunAndReturn(run func(ctx context.Context, req *models.EmailNotificationRequest) (*models.NotificationResponse, error)) *MockNotificationService_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

type MockOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderService) EXPECT() *MockOrderService_Expecter {
	return &MockOrderService_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) CreateOrder(ctx context.Context, req *models.CreateOrderRequest) (*models.Order, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *models.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateOrderRequest) (*models.Order, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateOrderRequest) *models.Order); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateOrderRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockOrderService_Expecter) CreateOrder(ctx interface{}, req interface{}) *MockOrderService_CreateOrder_Call {
	return &MockOrderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, req)}
}

func (_c *MockOrderService_CreateOrder_Call) Run(run func(ctx context.Context, req *models.CreateOrderRequest)) *MockOrderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.CreateOrderRequest))
	})
	return _c
}

func (_c *MockOrderService_CreateOrder_Call) Return(order *models.Order, err error) *MockOrderService_CreateOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_CreateOrder_Call) RunAndReturn(run func(ctx context.Context, req *models.CreateOrderRequest) (*models.Order, error)) *MockOrderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderById provides a mock function for the type MockOrderService
func (_mock *MockOrderService) GetOrderById(ctx context.Context, id uuid.UUID) (*models.Order, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderById")
	}

	var r0 *models.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Order, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Order); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_GetOrderById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderById'
type MockOrderService_GetOrderById_Call struct {
	*mock.Call
}

// GetOrderById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockOrderService_Expecter) GetOrderById(ctx interface{}, id interface{}) *MockOrderService_GetOrderById_Call {
	return &MockOrderService_GetOrderById_Call{Call: _e.mock.On("GetOrderById", ctx, id)}
}

func (_c *MockOrderService_GetOrderById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockOrderService_GetOrderById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockOrderService_GetOrderById_Call) Return(order *models.Order, err error) *MockOrderService_GetOrderById_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_GetOrderById_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Order, error)) *MockOrderService_GetOrderById_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrdersByCustomer provides a mock function for the type MockOrderService
func (_mock *MockOrderService) ListOrdersByCustomer(ctx context.Context, customerId uuid.UUID, page int, size int) ([]models.Order, int, error) {
	ret := _mock.Called(ctx, customerId, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListOrdersByCustomer")
	}

	var r0 []models.Order
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]models.Order, int, error)); ok {
		return returnFunc(ctx, customerId, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []models.Order); ok {
		r0 = returnFunc(ctx, customerId, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) int); ok {
		r1 = returnFunc(ctx, customerId, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, int) error); ok {
		r2 = returnFunc(ctx, customerId, page, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOrderService_ListOrdersByCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrdersByCustomer'
type MockOrderService_ListOrdersByCustomer_Call struct {
	*mock.Call
}

// ListOrdersByCustomer is a helper method to define mock.On call
//   - ctx
//   - customerId
//   - page
//   - size
func (_e *MockOrderService_Expecter) ListOrdersByCustomer(ctx interface{}, customerId interface{}, page interface{}, size interface{}) *MockOrderService_ListOrdersByCustomer_Call {
	return &MockOrderService_ListOrdersByCustomer_Call{Call: _e.mock.On("ListOrdersByCustomer", ctx, customerId, page, size)}
}

func (_c *MockOrderService_ListOrdersByCustomer_Call) Run(run func(ctx context.Context, customerId uuid.UUID, page int, size int)) *MockOrderService_ListOrdersByCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockOrderService_ListOrdersByCustomer_Call) Return(orders []models.Order, n int, err error) *MockOrderService_ListOrdersByCustomer_Call {
	_c.Call.Return(orders, n, err)
	return _c
}

func (_c *MockOrderService_ListOrdersByCustomer_Call) RunAndReturn(run func(ctx context.Context, customerId uuid.UUID, page int, size int) ([]models.Order, int, error)) *MockOrderService_ListOrdersByCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatus provides a mock function for the type MockOrderService
func (_mock *MockOrderService) UpdateOrderStatus(ctx context.Context, id uuid.UUID, status models.OrderStatus) (*models.Order, error) {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 *models.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.OrderStatus) (*models.Order, error)); ok {
		return returnFunc(ctx, id, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.OrderStatus) *models.Order); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.OrderStatus) error); ok {
		r1 = returnFunc(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_UpdateOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatus'
type MockOrderService_UpdateOrderStatus_Call struct {
	*mock.Call
}

// UpdateOrderStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *MockOrderService_Expecter) UpdateOrderStatus(ctx interface{}, id interface{}, status interface{}) *MockOrderService_UpdateOrderStatus_Call {
	return &MockOrderService_UpdateOrderStatus_Call{Call: _e.mock.On("UpdateOrderStatus", ctx, id, status)}
}

func (_c *MockOrderService_UpdateOrderStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status models.OrderStatus)) *MockOrderService_UpdateOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.OrderStatus))
	})
	return _c
}

func (_c *MockOrderService_UpdateOrderStatus_Call) Return(order *models.Order, err error) *MockOrderService_UpdateOrderStatus_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_UpdateOrderStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status models.OrderStatus) (*models.Order, error)) *MockOrderService_UpdateOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentService creates a new instance of MockPaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentService {
	mock := &MockPaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPaymentService is an autogenerated mock type for the PaymentService type
type MockPaymentService struct {
	mock.Mock
}

type MockPaymentService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentService) EXPECT() *MockPaymentService_Expecter {
	return &MockPaymentService_Expecter{mock: &_m.Mock}
}

// CreatePayment provides a mock function for the type MockPaymentService
func (_mock *MockPaymentService) CreatePayment(ctx context.Context, req *models.PaymentRequest) (*models.PaymentResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 *models.PaymentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.PaymentRequest) (*models.PaymentResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.PaymentRequest) *models.PaymentResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaymentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.PaymentRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymentService_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type MockPaymentService_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockPaymentService_Expecter) CreatePayment(ctx interface{}, req interface{}) *MockPaymentService_CreatePayment_Call {
	return &MockPaymentService_CreatePayment_Call{Call: _e.mock.On("CreatePayment", ctx, req)}
}

func (_c *MockPaymentService_CreatePayment_Call) Run(run func(ctx context.Context, req *models.PaymentRequest)) *MockPaymentService_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.PaymentRequest))
	})
	return _c
}

func (_c *MockPaymentService_CreatePayment_Call) Return(paymentResponse *models.PaymentResponse, err error) *MockPaymentService_CreatePayment_Call {
	_c.Call.Return(paymentResponse, err)
	return _c
}

func (_c *MockPaymentService_CreatePayment_Call) RunAndReturn(run func(ctx context.Context, req *models.PaymentRequest) (*models.PaymentResponse, error)) *MockPaymentService_CreatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentByID provides a mock function for the type MockPaymentService
func (_mock *MockPaymentService) GetPaymentByID(ctx context.Context, id string) (*models.Payment, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByID")
	}

	var r0 *models.Payment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Payment, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Payment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymentService_GetPaymentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentByID'
type MockPaymentService_GetPaymentByID_Call struct {
	*mock.Call
}

// GetPaymentByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockPaymentService_Expecter) GetPaymentByID(ctx interface{}, id interface{}) *MockPaymentService_GetPaymentByID_Call {
	return &MockPaymentService_GetPaymentByID_Call{Call: _e.mock.On("GetPaymentByID", ctx, id)}
}

func (_c *MockPaymentService_GetPaymentByID_Call) Run(run func(ctx context.Context, id string)) *MockPaymentService_GetPaymentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentService_GetPaymentByID_Call) Return(payment *models.Payment, err error) *MockPaymentService_GetPaymentByID_Call {
	_c.Call.Return(payment, err)
	return _c
}

func (_c *MockPaymentService_GetPaymentByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Payment, error)) *MockPaymentService_GetPaymentByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListPaymentsByCustomer provides a mock function for the type MockPaymentService
func (_mock *MockPaymentService) ListPaymentsByCustomer(ctx context.Context, customerID string, page int, size int) ([]*models.Payment, int, error) {
	ret := _mock.Called(ctx, customerID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListPaymentsByCustomer")
	}

	var r0 []*models.Payment
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Payment, int, error)); ok {
		return returnFunc(ctx, customerID, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Payment); ok {
		r0 = returnFunc(ctx, customerID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = returnFunc(ctx, customerID, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = returnFunc(ctx, customerID, page, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPaymentService_ListPaymentsByCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPaymentsByCustomer'
type MockPaymentService_ListPaymentsByCustomer_Call struct {
	*mock.Call
}

// ListPaymentsByCustomer is a helper method to define mock.On call
//   - ctx
//   - customerID
//   - page
//   - size
func (_e *MockPaymentService_Expecter) ListPaymentsByCustomer(ctx interface{}, customerID interface{}, page interface{}, size interface{}) *MockPaymentService_ListPaymentsByCustomer_Call {
	return &MockPaymentService_ListPaymentsByCustomer_Call{Call: _e.mock.On("ListPaymentsByCustomer", ctx, customerID, page, size)}
}

func (_c *MockPaymentService_ListPaymentsByCustomer_Call) Run(run func(ctx context.Context, customerID string, page int, size int)) *MockPaymentService_ListPaymentsByCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockPaymentService_ListPaymentsByCustomer_Call) Return(payments []*models.Payment, n int, err error) *MockPaymentService_ListPaymentsByCustomer_Call {
	_c.Call.Return(payments, n, err)
	return _c
}

func (_c *MockPaymentService_ListPaymentsByCustomer_Call) RunAndReturn(run func(ctx context.Context, customerID string, page int, size int) ([]*models.Payment, int, error)) *MockPaymentService_ListPaymentsByCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessWebhook provides a mock function for the type MockPaymentService
func (_mock *MockPaymentService) ProcessWebhook(ctx context.Context, payload []byte, signature string) (stripe.Event, error) {
	ret := _mock.Called(ctx, payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for ProcessWebhook")
	}

	var r0 stripe.Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) (stripe.Event, error)); ok {
		return returnFunc(ctx, payload, signature)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) stripe.Event); ok {
		r0 = returnFunc(ctx, payload, signature)
	} else {
		r0 = ret.Get(0).(stripe.Event)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = returnFunc(ctx, payload, signature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymentService_ProcessWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessWebhook'
type MockPaymentService_ProcessWebhook_Call struct {
	*mock.Call
}

// ProcessWebhook is a helper method to define mock.On call
//   - ctx
//   - payload
//   - signature
func (_e *MockPaymentService_Expecter) ProcessWebhook(ctx interface{}, payload interface{}, signature interface{}) *MockPaymentService_ProcessWebhook_Call {
	return &MockPaymentService_ProcessWebhook_Call{Call: _e.mock.On("ProcessWebhook", ctx, payload, signature)}
}

func (_c *MockPaymentService_ProcessWebhook_Call) Run(run func(ctx context.Context, payload []byte, signature string)) *MockPaymentService_ProcessWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *MockPaymentService_ProcessWebhook_Call) Return(v stripe.Event, err error) *MockPaymentService_ProcessWebhook_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockPaymentService_ProcessWebhook_Call) RunAndReturn(run func(ctx context.Context, payload []byte, signature string) (stripe.Event, error)) *MockPaymentService_ProcessWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductService creates a new instance of MockProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductService {
	mock := &MockProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductService is an autogenerated mock type for the ProductService type
type MockProductService struct {
	mock.Mock
}

type MockProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductService) EXPECT() *MockProductService_Expecter {
	return &MockProductService_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) CreateProduct(ctx context.Context, req *models.CreateProductRequest) (*models.Product, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateProductRequest) (*models.Product, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateProductRequest) *models.Product); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateProductRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockProductService_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockProductService_Expecter) CreateProduct(ctx interface{}, req interface{}) *MockProductService_CreateProduct_Call {
	return &MockProductService_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, req)}
}

func (_c *MockProductService_CreateProduct_Call) Run(run func(ctx context.Context, req *models.CreateProductRequest)) *MockProductService_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.CreateProductRequest))
	})
	return _c
}

func (_c *MockProductService_CreateProduct_Call) Return(product *models.Product, err error) *MockProductService_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductService_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, req *models.CreateProductRequest) (*models.Product, error)) *MockProductService_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function for the type MockProductService
func (_mock *MockProductService) GetProductByID(ctx context.Context, id uuid.UUID) (*models.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockProductService_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProductService_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockProductService_GetProductByID_Call {
	return &MockProductService_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockProductService_GetProductByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProductService_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProductService_GetProductByID_Call) Return(product *models.Product, err error) *MockProductService_GetProductByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductService_GetProductByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Product, error)) *MockProductService_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function for the type MockProductService
func (_mock *MockProductService) ListProducts(ctx context.Context, page int, pageSize int) ([]*models.Product, int, error) {
	ret := _mock.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []*models.Product
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Product, int, error)); ok {
		return returnFunc(ctx, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Product); ok {
		r0 = returnFunc(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProductService_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type MockProductService_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx
//   - page
//   - pageSize
func (_e *MockProductService_Expecter) ListProducts(ctx interface{}, page interface{}, pageSize interface{}) *MockProductService_ListProducts_Call {
	return &MockProductService_ListProducts_Call{Call: _e.mock.On("ListProducts", ctx, page, pageSize)}
}

func (_c *MockProductService_ListProducts_Call) Run(run func(ctx context.Context, page int, pageSize int)) *MockProductService_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockProductService_ListProducts_Call) Return(products []*models.Product, n int, err error) *MockProductService_ListProducts_Call {
	_c.Call.Return(products, n, err)
	return _c
}

func (_c *MockProductService_ListProducts_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int) ([]*models.Product, int, error)) *MockProductService_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) UpdateProduct(ctx context.Context, id uuid.UUID, req *models.UpdateProductRequest) (*models.Product, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateProductRequest) (*models.Product, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateProductRequest) *models.Product); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.UpdateProductRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockProductService_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *MockProductService_Expecter) UpdateProduct(ctx interface{}, id interface{}, req interface{}) *MockProductService_UpdateProduct_Call {
	return &MockProductService_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, id, req)}
}

func (_c *MockProductService_UpdateProduct_Call) Run(run func(ctx context.Context, id uuid.UUID, req *models.UpdateProductRequest)) *MockProductService_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.UpdateProductRequest))
	})
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) Return(product *models.Product, err error) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req *models.UpdateProductRequest) (*models.Product, error)) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function for the type MockUserService
func (_mock *MockUserService) GetUserByID(ctx context.Context, id uuid.UUID) (*models.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockUserService_GetUserByID_Call {
	return &MockUserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockUserService_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserService_GetUserByID_Call) Return(user *models.User, err error) *MockUserService_GetUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetUserByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.User, error)) *MockUserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockUserService
func (_mock *MockUserService) Login(ctx context.Context, req *models.LoginRequest) (*models.LoginResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.LoginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.LoginRequest) (*models.LoginResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.LoginRequest) *models.LoginResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.LoginRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockUserService_Expecter) Login(ctx interface{}, req interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockUserService_Login_Call) Run(run func(ctx context.Context, req *models.LoginRequest)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.LoginRequest))
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(loginResponse *models.LoginResponse, err error) *MockUserService_Login_Call {
	_c.Call.Return(loginResponse, err)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(ctx context.Context, req *models.LoginRequest) (*models.LoginResponse, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockUserService
func (_mock *MockUserService) Register(ctx context.Context, req *models.RegisterRequest) (*models.User, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.RegisterRequest) (*models.User, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.RegisterRequest) *models.User); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.RegisterRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockUserService_Expecter) Register(ctx interface{}, req interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *MockUserService_Register_Call) Run(run func(ctx context.Context, req *models.RegisterRequest)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.RegisterRequest))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(user *models.User, err error) *MockUserService_Register_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(ctx context.Context, req *models.RegisterRequest) (*models.User, error)) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}
