// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockNotificationService creates a new instance of MockNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationService {
	mock := &MockNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationService is an autogenerated mock type for the NotificationService type
type MockNotificationService struct {
	mock.Mock
}

type MockNotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationService) EXPECT() *MockNotificationService_Expecter {
	return &MockNotificationService_Expecter{mock: &_m.Mock}
}

// GetNotification provides a mock function for the type MockNotificationService
func (_mock *MockNotificationService) GetNotification(ctx context.Context, id uuid.UUID) (*models.Notification, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotification")
	}

	var r0 *models.Notification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Notification, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Notification); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationService_GetNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotification'
type MockNotificationService_GetNotification_Call struct {
	*mock.Call
}

// GetNotification is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockNotificationService_Expecter) GetNotification(ctx interface{}, id interface{}) *MockNotificationService_GetNotification_Call {
	return &MockNotificationService_GetNotification_Call{Call: _e.mock.On("GetNotification", ctx, id)}
}

func (_c *MockNotificationService_GetNotification_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockNotificationService_GetNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockNotificationService_GetNotification_Call) Return(notification *models.Notification, err error) *MockNotificationService_GetNotification_Call {
	_c.Call.Return(notification, err)
	return _c
}

func (_c *MockNotificationService_GetNotification_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Notification, error)) *MockNotificationService_GetNotification_Call {
	_c.Call.Return(run)
	return _c
}

// ListNotifications provides a mock function for the type MockNotificationService
func (_mock *MockNotificationService) ListNotifications(ctx context.Context, page int, size int) ([]*models.Notification, int, error) {
	ret := _mock.Called(ctx, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListNotifications")
	}

	var r0 []*models.Notification
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Notification, int, error)); ok {
		return returnFunc(ctx, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Notification); ok {
		r0 = returnFunc(ctx, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationService_ListNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotifications'
type MockNotificationService_ListNotifications_Call struct {
	*mock.Call
}

// ListNotifications is a helper method to define mock.On call
//   - ctx
//   - page
//   - size
func (_e *MockNotificationService_Expecter) ListNotifications(ctx interface{}, page interface{}, size interface{}) *MockNotificationService_ListNotifications_Call {
	return &MockNotificationService_ListNotifications_Call{Call: _e.mock.On("ListNotifications", ctx, page, size)}
}

func (_c *MockNotificationService_ListNotifications_Call) Run(run func(ctx context.Context, page int, size int)) *MockNotificationService_ListNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockNotificationService_ListNotifications_Call) Return(notifications []*models.Notification, n int, err error) *MockNotificationService_ListNotifications_Call {
	_c.Call.Return(notifications, n, err)
	return _c
}

func (_c *MockNotificationService_ListNotifications_Call) RunAndReturn(run func(ctx context.Context, page int, size int) ([]*models.Notification, int, error)) *MockNotificationService_ListNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// SendEmail provides a mock function for the type MockNotificationService
func (_mock *MockNotificationService) SendEmail(ctx context.Context, req *models.EmailNotificationRequest) (*models.NotificationResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 *models.NotificationResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.EmailNotificationRequest) (*models.NotificationResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.EmailNotificationRequest) *models.NotificationResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NotificationResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.EmailNotificationRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationService_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MockNotificationService_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockNotificationService_Expecter) SendEmail(ctx interface{}, req interface{}) *MockNotificationService_SendEmail_Call {
	return &MockNotificationService_SendEmail_Call{Call: _e.mock.On("SendEmail", ctx, req)}
}

func (_c *MockNotificationService_SendEmail_Call) Run(run func(ctx context.Context, req *models.EmailNotificationRequest)) *MockNotificationService_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.EmailNotificationRequest))
	})
	return _c
}

func (_c *MockNotificationService_SendEmail_Call) Return(notificationResponse *models.NotificationResponse, err error) *MockNotificationService_SendEmail_Call {
	_c.Call.Return(notificationResponse, err)
	return _c
}

func (_c *MockNotificationService_SendEmail_Call) RunAndReturn(run func(ctx context.Context, req *models.EmailNotificationRequest) (*models.NotificationResponse, error)) *MockNotificationService_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}
