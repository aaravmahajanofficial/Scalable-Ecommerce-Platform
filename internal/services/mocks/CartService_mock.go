// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCartService creates a new instance of MockCartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCartService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCartService {
	mock := &MockCartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCartService is an autogenerated mock type for the CartService type
type MockCartService struct {
	mock.Mock
}

type MockCartService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCartService) EXPECT() *MockCartService_Expecter {
	return &MockCartService_Expecter{mock: &_m.Mock}
}

// AddItem provides a mock function for the type MockCartService
func (_mock *MockCartService) AddItem(ctx context.Context, customerID uuid.UUID, req *models.AddItemRequest) (*models.Cart, error) {
	ret := _mock.Called(ctx, customerID, req)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 *models.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.AddItemRequest) (*models.Cart, error)); ok {
		return returnFunc(ctx, customerID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.AddItemRequest) *models.Cart); ok {
		r0 = returnFunc(ctx, customerID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.AddItemRequest) error); ok {
		r1 = returnFunc(ctx, customerID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCartService_AddItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItem'
type MockCartService_AddItem_Call struct {
	*mock.Call
}

// AddItem is a helper method to define mock.On call
//   - ctx
//   - customerID
//   - req
func (_e *MockCartService_Expecter) AddItem(ctx interface{}, customerID interface{}, req interface{}) *MockCartService_AddItem_Call {
	return &MockCartService_AddItem_Call{Call: _e.mock.On("AddItem", ctx, customerID, req)}
}

func (_c *MockCartService_AddItem_Call) Run(run func(ctx context.Context, customerID uuid.UUID, req *models.AddItemRequest)) *MockCartService_AddItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.AddItemRequest))
	})
	return _c
}

func (_c *MockCartService_AddItem_Call) Return(cart *models.Cart, err error) *MockCartService_AddItem_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *MockCartService_AddItem_Call) RunAndReturn(run func(ctx context.Context, customerID uuid.UUID, req *models.AddItemRequest) (*models.Cart, error)) *MockCartService_AddItem_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCart provides a mock function for the type MockCartService
func (_mock *MockCartService) CreateCart(ctx context.Context, userID uuid.UUID) (*models.Cart, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateCart")
	}

	var r0 *models.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Cart, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Cart); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCartService_CreateCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCart'
type MockCartService_CreateCart_Call struct {
	*mock.Call
}

// CreateCart is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockCartService_Expecter) CreateCart(ctx interface{}, userID interface{}) *MockCartService_CreateCart_Call {
	return &MockCartService_CreateCart_Call{Call: _e.mock.On("CreateCart", ctx, userID)}
}

func (_c *MockCartService_CreateCart_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockCartService_CreateCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockCartService_CreateCart_Call) Return(cart *models.Cart, err error) *MockCartService_CreateCart_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *MockCartService_CreateCart_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) (*models.Cart, error)) *MockCartService_CreateCart_Call {
	_c.Call.Return(run)
	return _c
}

// GetCart provides a mock function for the type MockCartService
func (_mock *MockCartService) GetCart(ctx context.Context, customerID uuid.UUID) (*models.Cart, error) {
	ret := _mock.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCart")
	}

	var r0 *models.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Cart, error)); ok {
		return returnFunc(ctx, customerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Cart); ok {
		r0 = returnFunc(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCartService_GetCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCart'
type MockCartService_GetCart_Call struct {
	*mock.Call
}

// GetCart is a helper method to define mock.On call
//   - ctx
//   - customerID
func (_e *MockCartService_Expecter) GetCart(ctx interface{}, customerID interface{}) *MockCartService_GetCart_Call {
	return &MockCartService_GetCart_Call{Call: _e.mock.On("GetCart", ctx, customerID)}
}

func (_c *MockCartService_GetCart_Call) Run(run func(ctx context.Context, customerID uuid.UUID)) *MockCartService_GetCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockCartService_GetCart_Call) Return(cart *models.Cart, err error) *MockCartService_GetCart_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *MockCartService_GetCart_Call) RunAndReturn(run func(ctx context.Context, customerID uuid.UUID) (*models.Cart, error)) *MockCartService_GetCart_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQuantity provides a mock function for the type MockCartService
func (_mock *MockCartService) UpdateQuantity(ctx context.Context, customerID uuid.UUID, req *models.UpdateQuantityRequest) (*models.Cart, error) {
	ret := _mock.Called(ctx, customerID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuantity")
	}

	var r0 *models.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateQuantityRequest) (*models.Cart, error)); ok {
		return returnFunc(ctx, customerID, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateQuantityRequest) *models.Cart); ok {
		r0 = returnFunc(ctx, customerID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.UpdateQuantityRequest) error); ok {
		r1 = returnFunc(ctx, customerID, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCartService_UpdateQuantity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQuantity'
type MockCartService_UpdateQuantity_Call struct {
	*mock.Call
}

// UpdateQuantity is a helper method to define mock.On call
//   - ctx
//   - customerID
//   - req
func (_e *MockCartService_Expecter) UpdateQuantity(ctx interface{}, customerID interface{}, req interface{}) *MockCartService_UpdateQuantity_Call {
	return &MockCartService_UpdateQuantity_Call{Call: _e.mock.On("UpdateQuantity", ctx, customerID, req)}
}

func (_c *MockCartService_UpdateQuantity_Call) Run(run func(ctx context.Context, customerID uuid.UUID, req *models.UpdateQuantityRequest)) *MockCartService_UpdateQuantity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.UpdateQuantityRequest))
	})
	return _c
}

func (_c *MockCartService_UpdateQuantity_Call) Return(cart *models.Cart, err error) *MockCartService_UpdateQuantity_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *MockCartService_UpdateQuantity_Call) RunAndReturn(run func(ctx context.Context, customerID uuid.UUID, req *models.UpdateQuantityRequest) (*models.Cart, error)) *MockCartService_UpdateQuantity_Call {
	_c.Call.Return(run)
	return _c
}
