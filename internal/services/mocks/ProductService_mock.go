// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProductService creates a new instance of MockProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductService {
	mock := &MockProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductService is an autogenerated mock type for the ProductService type
type MockProductService struct {
	mock.Mock
}

type MockProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductService) EXPECT() *MockProductService_Expecter {
	return &MockProductService_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) CreateProduct(ctx context.Context, req *models.CreateProductRequest) (*models.Product, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateProductRequest) (*models.Product, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateProductRequest) *models.Product); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateProductRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockProductService_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockProductService_Expecter) CreateProduct(ctx interface{}, req interface{}) *MockProductService_CreateProduct_Call {
	return &MockProductService_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, req)}
}

func (_c *MockProductService_CreateProduct_Call) Run(run func(ctx context.Context, req *models.CreateProductRequest)) *MockProductService_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.CreateProductRequest))
	})
	return _c
}

func (_c *MockProductService_CreateProduct_Call) Return(product *models.Product, err error) *MockProductService_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductService_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, req *models.CreateProductRequest) (*models.Product, error)) *MockProductService_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function for the type MockProductService
func (_mock *MockProductService) GetProductByID(ctx context.Context, id uuid.UUID) (*models.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockProductService_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProductService_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockProductService_GetProductByID_Call {
	return &MockProductService_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockProductService_GetProductByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProductService_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProductService_GetProductByID_Call) Return(product *models.Product, err error) *MockProductService_GetProductByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductService_GetProductByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Product, error)) *MockProductService_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function for the type MockProductService
func (_mock *MockProductService) ListProducts(ctx context.Context, page int, pageSize int) ([]*models.Product, int, error) {
	ret := _mock.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []*models.Product
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Product, int, error)); ok {
		return returnFunc(ctx, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Product); ok {
		r0 = returnFunc(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProductService_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type MockProductService_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx
//   - page
//   - pageSize
func (_e *MockProductService_Expecter) ListProducts(ctx interface{}, page interface{}, pageSize interface{}) *MockProductService_ListProducts_Call {
	return &MockProductService_ListProducts_Call{Call: _e.mock.On("ListProducts", ctx, page, pageSize)}
}

func (_c *MockProductService_ListProducts_Call) Run(run func(ctx context.Context, page int, pageSize int)) *MockProductService_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockProductService_ListProducts_Call) Return(products []*models.Product, n int, err error) *MockProductService_ListProducts_Call {
	_c.Call.Return(products, n, err)
	return _c
}

func (_c *MockProductService_ListProducts_Call) RunAndReturn(run func(ctx context.Context, page int, pageSize int) ([]*models.Product, int, error)) *MockProductService_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) UpdateProduct(ctx context.Context, id uuid.UUID, req *models.UpdateProductRequest) (*models.Product, error) {
	ret := _mock.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateProductRequest) (*models.Product, error)); ok {
		return returnFunc(ctx, id, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *models.UpdateProductRequest) *models.Product); ok {
		r0 = returnFunc(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *models.UpdateProductRequest) error); ok {
		r1 = returnFunc(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockProductService_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx
//   - id
//   - req
func (_e *MockProductService_Expecter) UpdateProduct(ctx interface{}, id interface{}, req interface{}) *MockProductService_UpdateProduct_Call {
	return &MockProductService_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, id, req)}
}

func (_c *MockProductService_UpdateProduct_Call) Run(run func(ctx context.Context, id uuid.UUID, req *models.UpdateProductRequest)) *MockProductService_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*models.UpdateProductRequest))
	})
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) Return(product *models.Product, err error) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, req *models.UpdateProductRequest) (*models.Product, error)) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}
