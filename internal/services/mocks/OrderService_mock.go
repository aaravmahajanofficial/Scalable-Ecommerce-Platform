// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

type MockOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderService) EXPECT() *MockOrderService_Expecter {
	return &MockOrderService_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) CreateOrder(ctx context.Context, req *models.CreateOrderRequest) (*models.Order, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *models.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateOrderRequest) (*models.Order, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateOrderRequest) *models.Order); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateOrderRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockOrderService_Expecter) CreateOrder(ctx interface{}, req interface{}) *MockOrderService_CreateOrder_Call {
	return &MockOrderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, req)}
}

func (_c *MockOrderService_CreateOrder_Call) Run(run func(ctx context.Context, req *models.CreateOrderRequest)) *MockOrderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.CreateOrderRequest))
	})
	return _c
}

func (_c *MockOrderService_CreateOrder_Call) Return(order *models.Order, err error) *MockOrderService_CreateOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_CreateOrder_Call) RunAndReturn(run func(ctx context.Context, req *models.CreateOrderRequest) (*models.Order, error)) *MockOrderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderById provides a mock function for the type MockOrderService
func (_mock *MockOrderService) GetOrderById(ctx context.Context, id uuid.UUID) (*models.Order, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderById")
	}

	var r0 *models.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Order, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Order); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_GetOrderById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderById'
type MockOrderService_GetOrderById_Call struct {
	*mock.Call
}

// GetOrderById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockOrderService_Expecter) GetOrderById(ctx interface{}, id interface{}) *MockOrderService_GetOrderById_Call {
	return &MockOrderService_GetOrderById_Call{Call: _e.mock.On("GetOrderById", ctx, id)}
}

func (_c *MockOrderService_GetOrderById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockOrderService_GetOrderById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockOrderService_GetOrderById_Call) Return(order *models.Order, err error) *MockOrderService_GetOrderById_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_GetOrderById_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Order, error)) *MockOrderService_GetOrderById_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrdersByCustomer provides a mock function for the type MockOrderService
func (_mock *MockOrderService) ListOrdersByCustomer(ctx context.Context, customerId uuid.UUID, page int, size int) ([]models.Order, int, error) {
	ret := _mock.Called(ctx, customerId, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListOrdersByCustomer")
	}

	var r0 []models.Order
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]models.Order, int, error)); ok {
		return returnFunc(ctx, customerId, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []models.Order); ok {
		r0 = returnFunc(ctx, customerId, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) int); ok {
		r1 = returnFunc(ctx, customerId, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, int) error); ok {
		r2 = returnFunc(ctx, customerId, page, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOrderService_ListOrdersByCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrdersByCustomer'
type MockOrderService_ListOrdersByCustomer_Call struct {
	*mock.Call
}

// ListOrdersByCustomer is a helper method to define mock.On call
//   - ctx
//   - customerId
//   - page
//   - size
func (_e *MockOrderService_Expecter) ListOrdersByCustomer(ctx interface{}, customerId interface{}, page interface{}, size interface{}) *MockOrderService_ListOrdersByCustomer_Call {
	return &MockOrderService_ListOrdersByCustomer_Call{Call: _e.mock.On("ListOrdersByCustomer", ctx, customerId, page, size)}
}

func (_c *MockOrderService_ListOrdersByCustomer_Call) Run(run func(ctx context.Context, customerId uuid.UUID, page int, size int)) *MockOrderService_ListOrdersByCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockOrderService_ListOrdersByCustomer_Call) Return(orders []models.Order, n int, err error) *MockOrderService_ListOrdersByCustomer_Call {
	_c.Call.Return(orders, n, err)
	return _c
}

func (_c *MockOrderService_ListOrdersByCustomer_Call) RunAndReturn(run func(ctx context.Context, customerId uuid.UUID, page int, size int) ([]models.Order, int, error)) *MockOrderService_ListOrdersByCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatus provides a mock function for the type MockOrderService
func (_mock *MockOrderService) UpdateOrderStatus(ctx context.Context, id uuid.UUID, status models.OrderStatus) (*models.Order, error) {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 *models.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.OrderStatus) (*models.Order, error)); ok {
		return returnFunc(ctx, id, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.OrderStatus) *models.Order); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.OrderStatus) error); ok {
		r1 = returnFunc(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_UpdateOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatus'
type MockOrderService_UpdateOrderStatus_Call struct {
	*mock.Call
}

// UpdateOrderStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *MockOrderService_Expecter) UpdateOrderStatus(ctx interface{}, id interface{}, status interface{}) *MockOrderService_UpdateOrderStatus_Call {
	return &MockOrderService_UpdateOrderStatus_Call{Call: _e.mock.On("UpdateOrderStatus", ctx, id, status)}
}

func (_c *MockOrderService_UpdateOrderStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status models.OrderStatus)) *MockOrderService_UpdateOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.OrderStatus))
	})
	return _c
}

func (_c *MockOrderService_UpdateOrderStatus_Call) Return(order *models.Order, err error) *MockOrderService_UpdateOrderStatus_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_UpdateOrderStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status models.OrderStatus) (*models.Order, error)) *MockOrderService_UpdateOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}
