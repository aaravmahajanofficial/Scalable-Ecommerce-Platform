// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	mock "github.com/stretchr/testify/mock"

	stripe "github.com/stripe/stripe-go/v81"
)

// PaymentService is an autogenerated mock type for the PaymentService type
type PaymentService struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: ctx, req
func (_m *PaymentService) CreatePayment(ctx context.Context, req *models.PaymentRequest) (*models.PaymentResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 *models.PaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PaymentRequest) (*models.PaymentResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.PaymentRequest) *models.PaymentResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.PaymentRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentByID provides a mock function with given fields: ctx, id
func (_m *PaymentService) GetPaymentByID(ctx context.Context, id string) (*models.Payment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByID")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Payment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Payment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPaymentsByCustomer provides a mock function with given fields: ctx, customerID, page, size
func (_m *PaymentService) ListPaymentsByCustomer(ctx context.Context, customerID string, page int, size int) ([]*models.Payment, int, error) {
	ret := _m.Called(ctx, customerID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListPaymentsByCustomer")
	}

	var r0 []*models.Payment
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Payment, int, error)); ok {
		return rf(ctx, customerID, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Payment); ok {
		r0 = rf(ctx, customerID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, customerID, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, customerID, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProcessWebhook provides a mock function with given fields: ctx, payload, signature
func (_m *PaymentService) ProcessWebhook(ctx context.Context, payload []byte, signature string) (stripe.Event, error) {
	ret := _m.Called(ctx, payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for ProcessWebhook")
	}

	var r0 stripe.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) (stripe.Event, error)); ok {
		return rf(ctx, payload, signature)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string) stripe.Event); ok {
		r0 = rf(ctx, payload, signature)
	} else {
		r0 = ret.Get(0).(stripe.Event)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = rf(ctx, payload, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentService creates a new instance of PaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentService {
	mock := &PaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
