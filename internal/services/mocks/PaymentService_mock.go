// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/pkg/stripe"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPaymentService creates a new instance of MockPaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentService {
	mock := &MockPaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPaymentService is an autogenerated mock type for the PaymentService type
type MockPaymentService struct {
	mock.Mock
}

type MockPaymentService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentService) EXPECT() *MockPaymentService_Expecter {
	return &MockPaymentService_Expecter{mock: &_m.Mock}
}

// CreatePayment provides a mock function for the type MockPaymentService
func (_mock *MockPaymentService) CreatePayment(ctx context.Context, req *models.PaymentRequest) (*models.PaymentResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 *models.PaymentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.PaymentRequest) (*models.PaymentResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.PaymentRequest) *models.PaymentResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PaymentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.PaymentRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymentService_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type MockPaymentService_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockPaymentService_Expecter) CreatePayment(ctx interface{}, req interface{}) *MockPaymentService_CreatePayment_Call {
	return &MockPaymentService_CreatePayment_Call{Call: _e.mock.On("CreatePayment", ctx, req)}
}

func (_c *MockPaymentService_CreatePayment_Call) Run(run func(ctx context.Context, req *models.PaymentRequest)) *MockPaymentService_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.PaymentRequest))
	})
	return _c
}

func (_c *MockPaymentService_CreatePayment_Call) Return(paymentResponse *models.PaymentResponse, err error) *MockPaymentService_CreatePayment_Call {
	_c.Call.Return(paymentResponse, err)
	return _c
}

func (_c *MockPaymentService_CreatePayment_Call) RunAndReturn(run func(ctx context.Context, req *models.PaymentRequest) (*models.PaymentResponse, error)) *MockPaymentService_CreatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentByID provides a mock function for the type MockPaymentService
func (_mock *MockPaymentService) GetPaymentByID(ctx context.Context, id string) (*models.Payment, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByID")
	}

	var r0 *models.Payment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Payment, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Payment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymentService_GetPaymentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentByID'
type MockPaymentService_GetPaymentByID_Call struct {
	*mock.Call
}

// GetPaymentByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockPaymentService_Expecter) GetPaymentByID(ctx interface{}, id interface{}) *MockPaymentService_GetPaymentByID_Call {
	return &MockPaymentService_GetPaymentByID_Call{Call: _e.mock.On("GetPaymentByID", ctx, id)}
}

func (_c *MockPaymentService_GetPaymentByID_Call) Run(run func(ctx context.Context, id string)) *MockPaymentService_GetPaymentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentService_GetPaymentByID_Call) Return(payment *models.Payment, err error) *MockPaymentService_GetPaymentByID_Call {
	_c.Call.Return(payment, err)
	return _c
}

func (_c *MockPaymentService_GetPaymentByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Payment, error)) *MockPaymentService_GetPaymentByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListPaymentsByCustomer provides a mock function for the type MockPaymentService
func (_mock *MockPaymentService) ListPaymentsByCustomer(ctx context.Context, customerID string, page int, size int) ([]*models.Payment, int, error) {
	ret := _mock.Called(ctx, customerID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListPaymentsByCustomer")
	}

	var r0 []*models.Payment
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Payment, int, error)); ok {
		return returnFunc(ctx, customerID, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Payment); ok {
		r0 = returnFunc(ctx, customerID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = returnFunc(ctx, customerID, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = returnFunc(ctx, customerID, page, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPaymentService_ListPaymentsByCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPaymentsByCustomer'
type MockPaymentService_ListPaymentsByCustomer_Call struct {
	*mock.Call
}

// ListPaymentsByCustomer is a helper method to define mock.On call
//   - ctx
//   - customerID
//   - page
//   - size
func (_e *MockPaymentService_Expecter) ListPaymentsByCustomer(ctx interface{}, customerID interface{}, page interface{}, size interface{}) *MockPaymentService_ListPaymentsByCustomer_Call {
	return &MockPaymentService_ListPaymentsByCustomer_Call{Call: _e.mock.On("ListPaymentsByCustomer", ctx, customerID, page, size)}
}

func (_c *MockPaymentService_ListPaymentsByCustomer_Call) Run(run func(ctx context.Context, customerID string, page int, size int)) *MockPaymentService_ListPaymentsByCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockPaymentService_ListPaymentsByCustomer_Call) Return(payments []*models.Payment, n int, err error) *MockPaymentService_ListPaymentsByCustomer_Call {
	_c.Call.Return(payments, n, err)
	return _c
}

func (_c *MockPaymentService_ListPaymentsByCustomer_Call) RunAndReturn(run func(ctx context.Context, customerID string, page int, size int) ([]*models.Payment, int, error)) *MockPaymentService_ListPaymentsByCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessWebhook provides a mock function for the type MockPaymentService
func (_mock *MockPaymentService) ProcessWebhook(ctx context.Context, payload []byte, signature string) (stripe.Event, error) {
	ret := _mock.Called(ctx, payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for ProcessWebhook")
	}

	var r0 stripe.Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) (stripe.Event, error)); ok {
		return returnFunc(ctx, payload, signature)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, string) stripe.Event); ok {
		r0 = returnFunc(ctx, payload, signature)
	} else {
		r0 = ret.Get(0).(stripe.Event)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, string) error); ok {
		r1 = returnFunc(ctx, payload, signature)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymentService_ProcessWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessWebhook'
type MockPaymentService_ProcessWebhook_Call struct {
	*mock.Call
}

// ProcessWebhook is a helper method to define mock.On call
//   - ctx
//   - payload
//   - signature
func (_e *MockPaymentService_Expecter) ProcessWebhook(ctx interface{}, payload interface{}, signature interface{}) *MockPaymentService_ProcessWebhook_Call {
	return &MockPaymentService_ProcessWebhook_Call{Call: _e.mock.On("ProcessWebhook", ctx, payload, signature)}
}

func (_c *MockPaymentService_ProcessWebhook_Call) Run(run func(ctx context.Context, payload []byte, signature string)) *MockPaymentService_ProcessWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(string))
	})
	return _c
}

func (_c *MockPaymentService_ProcessWebhook_Call) Return(v stripe.Event, err error) *MockPaymentService_ProcessWebhook_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockPaymentService_ProcessWebhook_Call) RunAndReturn(run func(ctx context.Context, payload []byte, signature string) (stripe.Event, error)) *MockPaymentService_ProcessWebhook_Call {
	_c.Call.Return(run)
	return _c
}
