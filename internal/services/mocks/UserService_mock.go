// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function for the type MockUserService
func (_mock *MockUserService) GetUserByID(ctx context.Context, id uuid.UUID) (*models.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockUserService_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockUserService_GetUserByID_Call {
	return &MockUserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockUserService_GetUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserService_GetUserByID_Call) Return(user *models.User, err error) *MockUserService_GetUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetUserByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.User, error)) *MockUserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockUserService
func (_mock *MockUserService) Login(ctx context.Context, req *models.LoginRequest) (*models.LoginResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.LoginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.LoginRequest) (*models.LoginResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.LoginRequest) *models.LoginResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.LoginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.LoginRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockUserService_Expecter) Login(ctx interface{}, req interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockUserService_Login_Call) Run(run func(ctx context.Context, req *models.LoginRequest)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.LoginRequest))
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(loginResponse *models.LoginResponse, err error) *MockUserService_Login_Call {
	_c.Call.Return(loginResponse, err)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(ctx context.Context, req *models.LoginRequest) (*models.LoginResponse, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockUserService
func (_mock *MockUserService) Register(ctx context.Context, req *models.RegisterRequest) (*models.User, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.RegisterRequest) (*models.User, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.RegisterRequest) *models.User); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.RegisterRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockUserService_Expecter) Register(ctx interface{}, req interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *MockUserService_Register_Call) Run(run func(ctx context.Context, req *models.RegisterRequest)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.RegisterRequest))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(user *models.User, err error) *MockUserService_Register_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(ctx context.Context, req *models.RegisterRequest) (*models.User, error)) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}
