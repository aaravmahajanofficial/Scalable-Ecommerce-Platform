// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductRepository is an autogenerated mock type for the ProductRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) CreateProduct(ctx context.Context, product *models.Product) error {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Product) error); ok {
		r0 = returnFunc(ctx, product)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductRepository_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockProductRepository_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx
//   - product
func (_e *MockProductRepository_Expecter) CreateProduct(ctx interface{}, product interface{}) *MockProductRepository_CreateProduct_Call {
	return &MockProductRepository_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, product)}
}

func (_c *MockProductRepository_CreateProduct_Call) Run(run func(ctx context.Context, product *models.Product)) *MockProductRepository_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Product))
	})
	return _c
}

func (_c *MockProductRepository_CreateProduct_Call) Return(err error) *MockProductRepository_CreateProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductRepository_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, product *models.Product) error) *MockProductRepository_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) GetProductByID(ctx context.Context, id uuid.UUID) (*models.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockProductRepository_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProductRepository_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockProductRepository_GetProductByID_Call {
	return &MockProductRepository_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockProductRepository_GetProductByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockProductRepository_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockProductRepository_GetProductByID_Call) Return(product *models.Product, err error) *MockProductRepository_GetProductByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductRepository_GetProductByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Product, error)) *MockProductRepository_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) ListProducts(ctx context.Context, page int, size int) ([]*models.Product, int, error) {
	ret := _mock.Called(ctx, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []*models.Product
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Product, int, error)); ok {
		return returnFunc(ctx, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Product); ok {
		r0 = returnFunc(ctx, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProductRepository_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type MockProductRepository_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx
//   - page
//   - size
func (_e *MockProductRepository_Expecter) ListProducts(ctx interface{}, page interface{}, size interface{}) *MockProductRepository_ListProducts_Call {
	return &MockProductRepository_ListProducts_Call{Call: _e.mock.On("ListProducts", ctx, page, size)}
}

func (_c *MockProductRepository_ListProducts_Call) Run(run func(ctx context.Context, page int, size int)) *MockProductRepository_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockProductRepository_ListProducts_Call) Return(products []*models.Product, n int, err error) *MockProductRepository_ListProducts_Call {
	_c.Call.Return(products, n, err)
	return _c
}

func (_c *MockProductRepository_ListProducts_Call) RunAndReturn(run func(ctx context.Context, page int, size int) ([]*models.Product, int, error)) *MockProductRepository_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) UpdateProduct(ctx context.Context, product *models.Product) error {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Product) error); ok {
		r0 = returnFunc(ctx, product)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductRepository_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockProductRepository_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx
//   - product
func (_e *MockProductRepository_Expecter) UpdateProduct(ctx interface{}, product interface{}) *MockProductRepository_UpdateProduct_Call {
	return &MockProductRepository_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, product)}
}

func (_c *MockProductRepository_UpdateProduct_Call) Run(run func(ctx context.Context, product *models.Product)) *MockProductRepository_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Product))
	})
	return _c
}

func (_c *MockProductRepository_UpdateProduct_Call) Return(err error) *MockProductRepository_UpdateProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductRepository_UpdateProduct_Call) RunAndReturn(run func(ctx context.Context, product *models.Product) error) *MockProductRepository_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}
