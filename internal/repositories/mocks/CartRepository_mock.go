// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCartRepository creates a new instance of MockCartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCartRepository {
	mock := &MockCartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCartRepository is an autogenerated mock type for the CartRepository type
type MockCartRepository struct {
	mock.Mock
}

type MockCartRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCartRepository) EXPECT() *MockCartRepository_Expecter {
	return &MockCartRepository_Expecter{mock: &_m.Mock}
}

// CreateCart provides a mock function for the type MockCartRepository
func (_mock *MockCartRepository) CreateCart(ctx context.Context, cart *models.Cart) error {
	ret := _mock.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for CreateCart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Cart) error); ok {
		r0 = returnFunc(ctx, cart)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCartRepository_CreateCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCart'
type MockCartRepository_CreateCart_Call struct {
	*mock.Call
}

// CreateCart is a helper method to define mock.On call
//   - ctx
//   - cart
func (_e *MockCartRepository_Expecter) CreateCart(ctx interface{}, cart interface{}) *MockCartRepository_CreateCart_Call {
	return &MockCartRepository_CreateCart_Call{Call: _e.mock.On("CreateCart", ctx, cart)}
}

func (_c *MockCartRepository_CreateCart_Call) Run(run func(ctx context.Context, cart *models.Cart)) *MockCartRepository_CreateCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Cart))
	})
	return _c
}

func (_c *MockCartRepository_CreateCart_Call) Return(err error) *MockCartRepository_CreateCart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCartRepository_CreateCart_Call) RunAndReturn(run func(ctx context.Context, cart *models.Cart) error) *MockCartRepository_CreateCart_Call {
	_c.Call.Return(run)
	return _c
}

// GetCartByCustomerID provides a mock function for the type MockCartRepository
func (_mock *MockCartRepository) GetCartByCustomerID(ctx context.Context, customerID uuid.UUID) (*models.Cart, error) {
	ret := _mock.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartByCustomerID")
	}

	var r0 *models.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Cart, error)); ok {
		return returnFunc(ctx, customerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Cart); ok {
		r0 = returnFunc(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCartRepository_GetCartByCustomerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCartByCustomerID'
type MockCartRepository_GetCartByCustomerID_Call struct {
	*mock.Call
}

// GetCartByCustomerID is a helper method to define mock.On call
//   - ctx
//   - customerID
func (_e *MockCartRepository_Expecter) GetCartByCustomerID(ctx interface{}, customerID interface{}) *MockCartRepository_GetCartByCustomerID_Call {
	return &MockCartRepository_GetCartByCustomerID_Call{Call: _e.mock.On("GetCartByCustomerID", ctx, customerID)}
}

func (_c *MockCartRepository_GetCartByCustomerID_Call) Run(run func(ctx context.Context, customerID uuid.UUID)) *MockCartRepository_GetCartByCustomerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockCartRepository_GetCartByCustomerID_Call) Return(cart *models.Cart, err error) *MockCartRepository_GetCartByCustomerID_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *MockCartRepository_GetCartByCustomerID_Call) RunAndReturn(run func(ctx context.Context, customerID uuid.UUID) (*models.Cart, error)) *MockCartRepository_GetCartByCustomerID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCart provides a mock function for the type MockCartRepository
func (_mock *MockCartRepository) UpdateCart(ctx context.Context, cart *models.Cart) error {
	ret := _mock.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Cart) error); ok {
		r0 = returnFunc(ctx, cart)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCartRepository_UpdateCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCart'
type MockCartRepository_UpdateCart_Call struct {
	*mock.Call
}

// UpdateCart is a helper method to define mock.On call
//   - ctx
//   - cart
func (_e *MockCartRepository_Expecter) UpdateCart(ctx interface{}, cart interface{}) *MockCartRepository_UpdateCart_Call {
	return &MockCartRepository_UpdateCart_Call{Call: _e.mock.On("UpdateCart", ctx, cart)}
}

func (_c *MockCartRepository_UpdateCart_Call) Run(run func(ctx context.Context, cart *models.Cart)) *MockCartRepository_UpdateCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Cart))
	})
	return _c
}

func (_c *MockCartRepository_UpdateCart_Call) Return(err error) *MockCartRepository_UpdateCart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCartRepository_UpdateCart_Call) RunAndReturn(run func(ctx context.Context, cart *models.Cart) error) *MockCartRepository_UpdateCart_Call {
	_c.Call.Return(run)
	return _c
}
