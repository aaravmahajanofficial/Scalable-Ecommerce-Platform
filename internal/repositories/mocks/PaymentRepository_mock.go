// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPaymentRepository creates a new instance of MockPaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentRepository {
	mock := &MockPaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPaymentRepository is an autogenerated mock type for the PaymentRepository type
type MockPaymentRepository struct {
	mock.Mock
}

type MockPaymentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentRepository) EXPECT() *MockPaymentRepository_Expecter {
	return &MockPaymentRepository_Expecter{mock: &_m.Mock}
}

// CreatePayment provides a mock function for the type MockPaymentRepository
func (_mock *MockPaymentRepository) CreatePayment(ctx context.Context, payment *models.Payment) error {
	ret := _mock.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Payment) error); ok {
		r0 = returnFunc(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPaymentRepository_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type MockPaymentRepository_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//   - ctx
//   - payment
func (_e *MockPaymentRepository_Expecter) CreatePayment(ctx interface{}, payment interface{}) *MockPaymentRepository_CreatePayment_Call {
	return &MockPaymentRepository_CreatePayment_Call{Call: _e.mock.On("CreatePayment", ctx, payment)}
}

func (_c *MockPaymentRepository_CreatePayment_Call) Run(run func(ctx context.Context, payment *models.Payment)) *MockPaymentRepository_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Payment))
	})
	return _c
}

func (_c *MockPaymentRepository_CreatePayment_Call) Return(err error) *MockPaymentRepository_CreatePayment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPaymentRepository_CreatePayment_Call) RunAndReturn(run func(ctx context.Context, payment *models.Payment) error) *MockPaymentRepository_CreatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentByID provides a mock function for the type MockPaymentRepository
func (_mock *MockPaymentRepository) GetPaymentByID(ctx context.Context, id string) (*models.Payment, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByID")
	}

	var r0 *models.Payment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Payment, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Payment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPaymentRepository_GetPaymentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentByID'
type MockPaymentRepository_GetPaymentByID_Call struct {
	*mock.Call
}

// GetPaymentByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockPaymentRepository_Expecter) GetPaymentByID(ctx interface{}, id interface{}) *MockPaymentRepository_GetPaymentByID_Call {
	return &MockPaymentRepository_GetPaymentByID_Call{Call: _e.mock.On("GetPaymentByID", ctx, id)}
}

func (_c *MockPaymentRepository_GetPaymentByID_Call) Run(run func(ctx context.Context, id string)) *MockPaymentRepository_GetPaymentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentRepository_GetPaymentByID_Call) Return(payment *models.Payment, err error) *MockPaymentRepository_GetPaymentByID_Call {
	_c.Call.Return(payment, err)
	return _c
}

func (_c *MockPaymentRepository_GetPaymentByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Payment, error)) *MockPaymentRepository_GetPaymentByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListPaymentsOfCustomer provides a mock function for the type MockPaymentRepository
func (_mock *MockPaymentRepository) ListPaymentsOfCustomer(ctx context.Context, customerID string, page int, size int) ([]*models.Payment, int, error) {
	ret := _mock.Called(ctx, customerID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListPaymentsOfCustomer")
	}

	var r0 []*models.Payment
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Payment, int, error)); ok {
		return returnFunc(ctx, customerID, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Payment); ok {
		r0 = returnFunc(ctx, customerID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = returnFunc(ctx, customerID, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = returnFunc(ctx, customerID, page, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPaymentRepository_ListPaymentsOfCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPaymentsOfCustomer'
type MockPaymentRepository_ListPaymentsOfCustomer_Call struct {
	*mock.Call
}

// ListPaymentsOfCustomer is a helper method to define mock.On call
//   - ctx
//   - customerID
//   - page
//   - size
func (_e *MockPaymentRepository_Expecter) ListPaymentsOfCustomer(ctx interface{}, customerID interface{}, page interface{}, size interface{}) *MockPaymentRepository_ListPaymentsOfCustomer_Call {
	return &MockPaymentRepository_ListPaymentsOfCustomer_Call{Call: _e.mock.On("ListPaymentsOfCustomer", ctx, customerID, page, size)}
}

func (_c *MockPaymentRepository_ListPaymentsOfCustomer_Call) Run(run func(ctx context.Context, customerID string, page int, size int)) *MockPaymentRepository_ListPaymentsOfCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockPaymentRepository_ListPaymentsOfCustomer_Call) Return(payments []*models.Payment, n int, err error) *MockPaymentRepository_ListPaymentsOfCustomer_Call {
	_c.Call.Return(payments, n, err)
	return _c
}

func (_c *MockPaymentRepository_ListPaymentsOfCustomer_Call) RunAndReturn(run func(ctx context.Context, customerID string, page int, size int) ([]*models.Payment, int, error)) *MockPaymentRepository_ListPaymentsOfCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePaymentStatus provides a mock function for the type MockPaymentRepository
func (_mock *MockPaymentRepository) UpdatePaymentStatus(ctx context.Context, id string, status models.PaymentStatus) error {
	ret := _mock.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, models.PaymentStatus) error); ok {
		r0 = returnFunc(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPaymentRepository_UpdatePaymentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePaymentStatus'
type MockPaymentRepository_UpdatePaymentStatus_Call struct {
	*mock.Call
}

// UpdatePaymentStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
func (_e *MockPaymentRepository_Expecter) UpdatePaymentStatus(ctx interface{}, id interface{}, status interface{}) *MockPaymentRepository_UpdatePaymentStatus_Call {
	return &MockPaymentRepository_UpdatePaymentStatus_Call{Call: _e.mock.On("UpdatePaymentStatus", ctx, id, status)}
}

func (_c *MockPaymentRepository_UpdatePaymentStatus_Call) Run(run func(ctx context.Context, id string, status models.PaymentStatus)) *MockPaymentRepository_UpdatePaymentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.PaymentStatus))
	})
	return _c
}

func (_c *MockPaymentRepository_UpdatePaymentStatus_Call) Return(err error) *MockPaymentRepository_UpdatePaymentStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPaymentRepository_UpdatePaymentStatus_Call) RunAndReturn(run func(ctx context.Context, id string, status models.PaymentStatus) error) *MockPaymentRepository_UpdatePaymentStatus_Call {
	_c.Call.Return(run)
	return _c
}
