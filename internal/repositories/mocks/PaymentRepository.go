// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// PaymentRepository is an autogenerated mock type for the PaymentRepository type
type PaymentRepository struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: ctx, payment
func (_m *PaymentRepository) CreatePayment(ctx context.Context, payment *models.Payment) error {
	ret := _m.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Payment) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPaymentByID provides a mock function with given fields: ctx, id
func (_m *PaymentRepository) GetPaymentByID(ctx context.Context, id string) (*models.Payment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByID")
	}

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Payment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Payment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPaymentsOfCustomer provides a mock function with given fields: ctx, customerID, page, size
func (_m *PaymentRepository) ListPaymentsOfCustomer(ctx context.Context, customerID string, page int, size int) ([]*models.Payment, int, error) {
	ret := _m.Called(ctx, customerID, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListPaymentsOfCustomer")
	}

	var r0 []*models.Payment
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.Payment, int, error)); ok {
		return rf(ctx, customerID, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.Payment); ok {
		r0 = rf(ctx, customerID, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, customerID, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, customerID, page, size)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePaymentStatus provides a mock function with given fields: ctx, id, status
func (_m *PaymentRepository) UpdatePaymentStatus(ctx context.Context, id string, status models.PaymentStatus) error {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePaymentStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.PaymentStatus) error); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentRepository creates a new instance of PaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentRepository {
	mock := &PaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
