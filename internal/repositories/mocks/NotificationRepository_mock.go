// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/aaravmahajanofficial/scalable-ecommerce-platform/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockNotificationRepository creates a new instance of MockNotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationRepository {
	mock := &MockNotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationRepository is an autogenerated mock type for the NotificationRepository type
type MockNotificationRepository struct {
	mock.Mock
}

type MockNotificationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationRepository) EXPECT() *MockNotificationRepository_Expecter {
	return &MockNotificationRepository_Expecter{mock: &_m.Mock}
}

// CreateNotification provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) CreateNotification(ctx context.Context, notification *models.Notification) error {
	ret := _mock.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Notification) error); ok {
		r0 = returnFunc(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationRepository_CreateNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotification'
type MockNotificationRepository_CreateNotification_Call struct {
	*mock.Call
}

// CreateNotification is a helper method to define mock.On call
//   - ctx
//   - notification
func (_e *MockNotificationRepository_Expecter) CreateNotification(ctx interface{}, notification interface{}) *MockNotificationRepository_CreateNotification_Call {
	return &MockNotificationRepository_CreateNotification_Call{Call: _e.mock.On("CreateNotification", ctx, notification)}
}

func (_c *MockNotificationRepository_CreateNotification_Call) Run(run func(ctx context.Context, notification *models.Notification)) *MockNotificationRepository_CreateNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Notification))
	})
	return _c
}

func (_c *MockNotificationRepository_CreateNotification_Call) Return(err error) *MockNotificationRepository_CreateNotification_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationRepository_CreateNotification_Call) RunAndReturn(run func(ctx context.Context, notification *models.Notification) error) *MockNotificationRepository_CreateNotification_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationByID provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) GetNotificationByID(ctx context.Context, id uuid.UUID) (*models.Notification, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationByID")
	}

	var r0 *models.Notification
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Notification, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Notification); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationRepository_GetNotificationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationByID'
type MockNotificationRepository_GetNotificationByID_Call struct {
	*mock.Call
}

// GetNotificationByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockNotificationRepository_Expecter) GetNotificationByID(ctx interface{}, id interface{}) *MockNotificationRepository_GetNotificationByID_Call {
	return &MockNotificationRepository_GetNotificationByID_Call{Call: _e.mock.On("GetNotificationByID", ctx, id)}
}

func (_c *MockNotificationRepository_GetNotificationByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockNotificationRepository_GetNotificationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockNotificationRepository_GetNotificationByID_Call) Return(notification *models.Notification, err error) *MockNotificationRepository_GetNotificationByID_Call {
	_c.Call.Return(notification, err)
	return _c
}

func (_c *MockNotificationRepository_GetNotificationByID_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*models.Notification, error)) *MockNotificationRepository_GetNotificationByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListNotifications provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) ListNotifications(ctx context.Context, page int, size int) ([]*models.Notification, int, error) {
	ret := _mock.Called(ctx, page, size)

	if len(ret) == 0 {
		panic("no return value specified for ListNotifications")
	}

	var r0 []*models.Notification
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*models.Notification, int, error)); ok {
		return returnFunc(ctx, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*models.Notification); ok {
		r0 = returnFunc(ctx, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Notification)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = returnFunc(ctx, page, size)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = returnFunc(ctx, page, size)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationRepository_ListNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotifications'
type MockNotificationRepository_ListNotifications_Call struct {
	*mock.Call
}

// ListNotifications is a helper method to define mock.On call
//   - ctx
//   - page
//   - size
func (_e *MockNotificationRepository_Expecter) ListNotifications(ctx interface{}, page interface{}, size interface{}) *MockNotificationRepository_ListNotifications_Call {
	return &MockNotificationRepository_ListNotifications_Call{Call: _e.mock.On("ListNotifications", ctx, page, size)}
}

func (_c *MockNotificationRepository_ListNotifications_Call) Run(run func(ctx context.Context, page int, size int)) *MockNotificationRepository_ListNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockNotificationRepository_ListNotifications_Call) Return(notifications []*models.Notification, n int, err error) *MockNotificationRepository_ListNotifications_Call {
	_c.Call.Return(notifications, n, err)
	return _c
}

func (_c *MockNotificationRepository_ListNotifications_Call) RunAndReturn(run func(ctx context.Context, page int, size int) ([]*models.Notification, int, error)) *MockNotificationRepository_ListNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationStatus provides a mock function for the type MockNotificationRepository
func (_mock *MockNotificationRepository) UpdateNotificationStatus(ctx context.Context, id uuid.UUID, status models.NotificationStatus, errorMsg string) error {
	ret := _mock.Called(ctx, id, status, errorMsg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.NotificationStatus, string) error); ok {
		r0 = returnFunc(ctx, id, status, errorMsg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotificationRepository_UpdateNotificationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationStatus'
type MockNotificationRepository_UpdateNotificationStatus_Call struct {
	*mock.Call
}

// UpdateNotificationStatus is a helper method to define mock.On call
//   - ctx
//   - id
//   - status
//   - errorMsg
func (_e *MockNotificationRepository_Expecter) UpdateNotificationStatus(ctx interface{}, id interface{}, status interface{}, errorMsg interface{}) *MockNotificationRepository_UpdateNotificationStatus_Call {
	return &MockNotificationRepository_UpdateNotificationStatus_Call{Call: _e.mock.On("UpdateNotificationStatus", ctx, id, status, errorMsg)}
}

func (_c *MockNotificationRepository_UpdateNotificationStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status models.NotificationStatus, errorMsg string)) *MockNotificationRepository_UpdateNotificationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.NotificationStatus), args[3].(string))
	})
	return _c
}

func (_c *MockNotificationRepository_UpdateNotificationStatus_Call) Return(err error) *MockNotificationRepository_UpdateNotificationStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotificationRepository_UpdateNotificationStatus_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, status models.NotificationStatus, errorMsg string) error) *MockNotificationRepository_UpdateNotificationStatus_Call {
	_c.Call.Return(run)
	return _c
}
