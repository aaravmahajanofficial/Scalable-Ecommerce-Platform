// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockRateLimitRepository creates a new instance of MockRateLimitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRateLimitRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRateLimitRepository {
	mock := &MockRateLimitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRateLimitRepository is an autogenerated mock type for the RateLimitRepository type
type MockRateLimitRepository struct {
	mock.Mock
}

type MockRateLimitRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRateLimitRepository) EXPECT() *MockRateLimitRepository_Expecter {
	return &MockRateLimitRepository_Expecter{mock: &_m.Mock}
}

// CheckLoginRateLimit provides a mock function for the type MockRateLimitRepository
func (_mock *MockRateLimitRepository) CheckLoginRateLimit(ctx context.Context, username string) (bool, int, int, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for CheckLoginRateLimit")
	}

	var r0 bool
	var r1 int
	var r2 int
	var r3 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, int, int, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) int); ok {
		r2 = returnFunc(ctx, username)
	} else {
		r2 = ret.Get(2).(int)
	}
	if returnFunc, ok := ret.Get(3).(func(context.Context, string) error); ok {
		r3 = returnFunc(ctx, username)
	} else {
		r3 = ret.Error(3)
	}
	return r0, r1, r2, r3
}

// MockRateLimitRepository_CheckLoginRateLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLoginRateLimit'
type MockRateLimitRepository_CheckLoginRateLimit_Call struct {
	*mock.Call
}

// CheckLoginRateLimit is a helper method to define mock.On call
//   - ctx
//   - username
func (_e *MockRateLimitRepository_Expecter) CheckLoginRateLimit(ctx interface{}, username interface{}) *MockRateLimitRepository_CheckLoginRateLimit_Call {
	return &MockRateLimitRepository_CheckLoginRateLimit_Call{Call: _e.mock.On("CheckLoginRateLimit", ctx, username)}
}

func (_c *MockRateLimitRepository_CheckLoginRateLimit_Call) Run(run func(ctx context.Context, username string)) *MockRateLimitRepository_CheckLoginRateLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRateLimitRepository_CheckLoginRateLimit_Call) Return(b bool, n int, n1 int, err error) *MockRateLimitRepository_CheckLoginRateLimit_Call {
	_c.Call.Return(b, n, n1, err)
	return _c
}

func (_c *MockRateLimitRepository_CheckLoginRateLimit_Call) RunAndReturn(run func(ctx context.Context, username string) (bool, int, int, error)) *MockRateLimitRepository_CheckLoginRateLimit_Call {
	_c.Call.Return(run)
	return _c
}
